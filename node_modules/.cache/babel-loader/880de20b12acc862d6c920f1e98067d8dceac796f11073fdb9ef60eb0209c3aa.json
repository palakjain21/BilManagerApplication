{"ast":null,"code":"var _jsxFileName = \"/home/palak/BilManagerApplication/src/components/Chart/Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport \"./Chart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport const options = {\n  responsive: true,\n  plugins: {\n    title: {\n      display: true,\n      text: \"Expense Tracker\"\n    }\n  }\n};\nconst labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nexport const data = {\n  labels,\n  datasets: [{\n    label: \"Dataset 1\",\n    data: [65, 59, 80, 81, 56, 55, 40, 50, 60, 55, 80, 65],\n    borderColor: \"#54B4D3\",\n    backgroundColor: \"#54B4D3\"\n  }]\n};\nexport default function Charts(_ref) {\n  _s();\n  let {\n    bills\n  } = _ref;\n  const [chartData, setChartData] = React.useState();\n  let length = Object.keys(bills).length;\n  const month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const YearmonthMap = {};\n  for (let i = 0; i < length; i++) {\n    const date = new Date(bills[i].date);\n    const monthName = month[date.getMonth()];\n    const year = date.getFullYear();\n    if (!YearmonthMap[year]) {\n      YearmonthMap[year] = {};\n    }\n    if (!YearmonthMap[year][monthName]) {\n      YearmonthMap[year][monthName] = 0;\n    }\n    YearmonthMap[year][monthName] += bills[i].amount;\n  }\n  const [yearSelected, setYearSelected] = React.useState(Object.keys(YearmonthMap)[0]);\n  console.log(YearmonthMap, \"monthMap\");\n  useEffect(() => {\n    for (let i = 0; i < month.length; i++) {\n      if (!YearmonthMap[yearSelected][month[i]]) {\n        YearmonthMap[yearSelected][month[i]] = 0;\n      }\n    }\n    const datasetArray = [];\n    for (let i = 0; i < month.length; i++) {\n      datasetArray.push(YearmonthMap[yearSelected][month[i]]);\n    }\n    const data = {\n      labels: month,\n      datasets: [{\n        label: \"Budget\",\n        data: datasetArray,\n        borderColor: \"#54B4D3\",\n        backgroundColor: \"#54B4D3\"\n      }]\n    };\n    setChartData(data);\n    console.log(data, \"data\");\n  }, [yearSelected]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex flex-column\",\n    children: [chartData ? /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: chartData,\n      className: \"customChart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-end w-100\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-select customChartSelectWidth\",\n        \"aria-label\": \"Default select example\",\n        onChange: e => setYearSelected(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          selected: true,\n          children: \"Select Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), Object.keys(YearmonthMap).map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: year,\n          children: year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(Charts, \"mOAlmDQCBtkOtknEfXV0Oo3HvDE=\");\n_c = Charts;\nvar _c;\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"names":["React","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","register","options","responsive","plugins","title","display","text","labels","data","datasets","label","borderColor","backgroundColor","Charts","bills","chartData","setChartData","useState","length","Object","keys","month","YearmonthMap","i","date","Date","monthName","getMonth","year","getFullYear","amount","yearSelected","setYearSelected","console","log","datasetArray","push","e","target","value","map"],"sources":["/home/palak/BilManagerApplication/src/components/Chart/Chart.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport \"./Chart.css\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  responsive: true,\n  plugins: {\n    title: {\n      display: true,\n      text: \"Expense Tracker\",\n    },\n  },\n};\n\nconst labels = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nexport const data = {\n  labels,\n  datasets: [\n    {\n      label: \"Dataset 1\",\n      data: [65, 59, 80, 81, 56, 55, 40, 50, 60, 55, 80, 65],\n      borderColor: \"#54B4D3\",\n      backgroundColor: \"#54B4D3\",\n    },\n  ],\n};\n\nexport default function Charts({ bills }) {\n  const [chartData, setChartData] = React.useState();\n  let length = Object.keys(bills).length;\n  const month = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  const YearmonthMap = {};\n  for (let i = 0; i < length; i++) {\n    const date = new Date(bills[i].date);\n    const monthName = month[date.getMonth()];\n    const year = date.getFullYear();\n    if (!YearmonthMap[year]) {\n      YearmonthMap[year] = {};\n    }\n    if (!YearmonthMap[year][monthName]) {\n      YearmonthMap[year][monthName] = 0;\n    }\n    YearmonthMap[year][monthName] += bills[i].amount;\n  }\n  const [yearSelected, setYearSelected] = React.useState(\n    Object.keys(YearmonthMap)[0]\n  );\n  console.log(YearmonthMap, \"monthMap\");\n  useEffect(() => {\n    for (let i = 0; i < month.length; i++) {\n      if (!YearmonthMap[yearSelected][month[i]]) {\n        YearmonthMap[yearSelected][month[i]] = 0;\n      }\n    }\n    const datasetArray = [];\n    for (let i = 0; i < month.length; i++) {\n      datasetArray.push(YearmonthMap[yearSelected][month[i]]);\n    }\n    const data = {\n      labels: month,\n      datasets: [\n        {\n          label: \"Budget\",\n          data: datasetArray,\n          borderColor: \"#54B4D3\",\n          backgroundColor: \"#54B4D3\",\n        },\n      ],\n    };\n    setChartData(data);\n    console.log(data, \"data\");\n  }, [yearSelected]);\n  return (\n    <div className=\"d-flex flex-column\">\n      {chartData ? (\n        <Line options={options} data={chartData} className=\"customChart\" />\n      ) : (\n        <></>\n      )}\n      <div className=\"d-flex justify-content-end w-100\">\n        <select\n          className=\"form-select customChartSelectWidth\"\n          aria-label=\"Default select example\"\n          onChange={(e) => setYearSelected(e.target.value)}\n        >\n          <option selected>Select Year</option>\n          {Object.keys(YearmonthMap).map((year) => (\n            <option value={year}>{year}</option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}